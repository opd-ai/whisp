# Continuous Integration for Whisp - Fast CI pipeline for code quality and basic builds
name: CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  # Quick validation job
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev libgl1-mesa-dev xorg-dev

      - name: Verify Go modules
        run: |
          go mod download
          go mod verify

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted correctly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run vet
        run: go vet ./...

      - name: Run tests
        run: go test -v -race ./...

      - name: Run short integration tests
        run: go test -v -short -tags=integration ./...

  # Build verification for main platforms
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        target:
          - { goos: linux, goarch: amd64 }
          - { goos: windows, goarch: amd64 }
          - { goos: darwin, goarch: amd64 }
          - { goos: darwin, goarch: arm64 }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev libgl1-mesa-dev xorg-dev

      - name: Build for ${{ matrix.target.goos }}/${{ matrix.target.goarch }}
        run: |
          go mod download
          GOOS=${{ matrix.target.goos }} GOARCH=${{ matrix.target.goarch }} go build -v ./cmd/whisp

  # Security and dependency scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Check for known vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
